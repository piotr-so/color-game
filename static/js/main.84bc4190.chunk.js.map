{"version":3,"sources":["App.styled.js","components/styled-container/styled-container.styled.js","components/start-screen/start-screen.styled.js","components/styled-container/styled-container.component.jsx","components/custom-button/custom-button.styled.js","components/custom-button/custom-button.component.jsx","assets/svg-ico.component.jsx","assets/return-ico.component.jsx","components/start-screen/start-screen.component.jsx","components/cell/cell.styled.js","components/cell/cell.component.jsx","components/userScore/userScore.styled.js","components/userScore/userScore.component.jsx","components/game-finish/game-finish.styled.js","components/game-finish/game-finish.component.jsx","components/game-board/game-board.styled.js","components/utils/game-board.utils.js","components/game-board/game-board.component.jsx","App.js","serviceWorker.js","index.js"],"names":["AppWrapper","styled","div","Header","header","RainbowBorder","css","Wrapper","StartGameWrap","props","fixMargin","Input","input","Select","select","Label","NumberContainer","Arrow","button","plus","IconContainer","top","InfoModal","InfoWrapper","ConfirmButton","StyledContainer","children","Button","CustomButton","func","otherProps","onClick","Info","width","height","xmlns","xmlnsXlink","x","y","viewBox","cx","cy","r","d","ReturnIco","version","id","StartScreen","gameProperties","changeBoardProperties","changeGameDifficulty","changeGamePropertiesSimpleGame","switchScreen","incrOrDecrInputVal","checkValOnBlur","useState","customiseStatus","setCustomiseStatus","isInfoVisible","setisInfoVisible","rows","columns","difficulty","e","type","name","min","value","onChange","onBlur","customise","undefined","StyledCell","color","Cell","posX","posY","randColor","onClickFn","UserScoreWrapper","slideUp","keyframes","Score","AddedScore","span","UserScore","score","userScore","addedScore","addedScoreCssHelper","key","GameFinish","GameOver","h1","Summary","Value","GameFinishModal","clicks","StyledBoard","cols","shake","ResignButton","BoardOverflowControler","colorsArray","checkBoardForPossibleMoves","arrayToCheckAfterUpdate","array","checkingLoop","arrayToCheck","possibilities","i","length","transposedArrayToCheck","map","col","row","checkedRows","checkedCols","GameBoard","intRows","parseInt","intCols","generateArray","Array","from","n","k","fill","val","idx","Math","floor","random","createdArray","createGameBoard","gameBoard","setGameBoard","areAnyMovesLeft","setAreAnyMovesLeft","setScore","preventAnotherClick","setPreventAnotherClick","delayValuesForBoardIterations","handleCellClick","event","eventTargetPosX","eventTargetPosY","eventTargetColor","stateBoard","isBlocked","foundCellsArray","haveSameValues","arr1","arr2","checkELemExistence","testedArray","benchmarkArr","arrElem","scan","targetPosX","targetPosY","targetColor","down","left","right","checkUpOrDown","direction","benchmark","surroundingsColors","push","checkLeftOrRight","checkSurroundingCells","boardWithcolorEmptiedCells","foundElementsArray","newBoard","removeColorFromFoundCells","timeoutThisFn","delayVal","Promise","resolve","setTimeout","boardFromState","updatedGameBoard","colorEmptiedCellsArray","cellsToPullColorFrom","newBoardAfterColorChange","newColor","newBoardAfterPulls","posXReceiver","posYReceiver","posXProvider","posYProvider","providerColor","fillEmptyColorCells","dispatchFillEmptyColorCells","a","updatedGameBoardArr","cell","App","setGameProperties","screenToRender","setScreenToRender","command","Screens","preventDefault","target","isNaN","parsedVal","incrOrDecr","isNanTest","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iPAEaA,EAAaC,IAAOC,IAAV,2EAAGD,CAAH,mFAOVE,EAASF,IAAOG,OAAV,uEAAGH,CAAH,oI,4zBCPZ,IAAMI,EAAgBC,YAAH,KA8BbC,EAAUN,IAAOC,IAAV,qFAAGD,CAAH,0OAgBdI,G,8uBC7CC,IAAMG,EAAgBP,IAAOC,IAAV,oFAAGD,CAAH,uCAER,SAAAQ,GAAK,OAAIA,EAAMC,WAAa,UAGjCC,EAAQV,IAAOW,MAAV,4EAAGX,CAAH,qVAqBLY,EAASZ,IAAOa,OAAV,6EAAGb,CAAH,+NAkBNc,EAAQd,IAAOC,IAAV,4EAAGD,CAAH,gGAOLe,EAAkBf,IAAOC,IAAV,sFAAGD,CAAH,gFAOfgB,EAAQhB,IAAOiB,OAAV,4EAAGjB,CAAH,2WAoBR,SAAAQ,GAAK,OAAIA,EAAMU,MAAQb,YAAd,QAuBNc,EAAgBnB,IAAOC,IAAV,oFAAGD,CAAH,oJAIpB,SAAAQ,GAAK,OAAIA,EAAMY,IACbf,YADO,KAOHA,YAPG,QAoBD,SAAAG,GAAK,OAAIA,EAAMY,IAAMf,YAAZ,KAA+CA,YAA/C,QAKVgB,EAAYrB,IAAOC,IAAV,gFAAGD,CAAH,qJAYTsB,EAActB,IAAOC,IAAV,kFAAGD,CAAH,qkBAYlBI,GAiCOmB,EAAgBvB,IAAOiB,OAAV,oFAAGjB,CAAH,6fCnLXwB,EANS,SAAC,GAAD,IAAEC,EAAF,EAAEA,SAAF,OACpB,kBAACnB,EAAD,KACKmB,ICLIC,EAAS1B,IAAOiB,OAAV,kFAAGjB,CAAH,kmBCSJ2B,EANM,SAAC,GAAD,IAAEF,EAAF,EAAEA,SAAUG,EAAZ,EAAYA,KAAMC,EAAlB,EAAkBA,WAAlB,OACjB,kBAACH,EAAD,eAAQI,QAASF,GAAUC,GACtBJ,ICcMM,EAlBF,SAAC,GAAD,IAAEC,EAAF,EAAEA,MAAOC,EAAT,EAASA,OAAT,OACb,yBAAMC,MAAM,6BAA6BC,WAAW,+BAA+BC,EAAE,MAAMC,EAAE,MAC3FC,QAAQ,cAAcN,MAAOA,EAAOC,OAAQA,GAC9C,2BACC,2BACC,2BACC,4BAAQM,GAAG,MAAMC,GAAG,QAAQC,EAAE,OAC9B,0BAAMC,EAAE,sQAGR,0BAAMA,EAAE,+TCKIC,EAfG,SAAC,GAAD,IAAEX,EAAF,EAAEA,MAAOC,EAAT,EAASA,OAAT,OAClB,yBAAKW,QAAQ,MAAMC,GAAG,SAASX,MAAM,6BAA6BC,WAAW,+BAA+BG,QAAQ,cAClHN,MAAOA,EAAOC,OAAQA,GACxB,2BACC,2BACC,0BAAMS,EAAE,sSAGR,0BAAMA,EAAE,oVC6GKI,EArGK,SAAC,GAOK,IANtBC,EAMqB,EANrBA,eACAC,EAKqB,EALrBA,sBACAC,EAIqB,EAJrBA,qBACAC,EAGqB,EAHrBA,+BACAC,EAEqB,EAFrBA,aACAC,EACqB,EADrBA,mBACAC,EAAqB,EAArBA,eAAqB,EAEyBC,oBAAS,GAFlC,mBAEdC,EAFc,KAEGC,EAFH,OAGqBF,oBAAS,GAH9B,mBAGdG,EAHc,KAGCC,EAHD,KAKbC,EAA8BZ,EAA9BY,KAAMC,EAAwBb,EAAxBa,QAASC,EAAed,EAAfc,WAGvB,OACI,oCACI,kBAAC,EAAD,KAEKN,EACG,oCACA,kBAACpC,EAAD,CAAeC,KAAG,EAACU,QAAS,kBAAM0B,GAAmB,KACjD,kBAAC,EAAD,OAEJ,kBAACjD,EAAD,CAAeE,WAAS,GACpB,kBAACK,EAAD,gCACA,kBAACC,EAAD,KACI,kBAACC,EAAD,CAAOc,QAAS,SAACgC,GAAD,OAAOV,EAAmBU,EAAG,YAAa,WAC1D,kBAACpD,EAAD,CACIqD,KAAK,SACLlB,GAAG,OACHmB,KAAK,OACLC,IAAI,IACJC,MAAOP,EACPQ,SAAUnB,EACVoB,OAAQf,IAGZ,kBAACrC,EAAD,CAAOE,MAAI,EAACY,QAAS,SAACgC,GAAD,OAAOV,EAAmBU,EAAG,YAAa,YAEnE,kBAAChD,EAAD,mCACA,kBAACC,EAAD,KACI,kBAACC,EAAD,CAAOc,QAAS,SAACgC,GAAD,OAAOV,EAAmBU,EAAG,YAAa,cAC1D,kBAACpD,EAAD,CACIqD,KAAK,SACLlB,GAAG,UACHmB,KAAK,UACLC,IAAI,IACJC,MAAON,EACPO,SAAUnB,EACVoB,OAAQf,IAGZ,kBAACrC,EAAD,CAAOE,MAAI,EAACY,QAAS,SAAAgC,GAAC,OAAIV,EAAmBU,EAAG,YAAa,eAEjE,kBAAChD,EAAD,yBACA,kBAACC,EAAD,KACI,kBAACH,EAAD,CAAQsD,MAAOL,EAAYM,SAAUlB,GACjC,4BAAQiB,MAAM,KAAd,YACA,4BAAQA,MAAM,KAAd,YACA,4BAAQA,MAAM,KAAd,cAIR,kBAAC,EAAD,CAActC,KAAM,kBAAMuB,EAAa,eAAvC,gBAKA,oCACI,kBAAC5C,EAAD,KACI,kBAACO,EAAD,qBACA,kBAAC,EAAD,CAAcc,KAAM,kBAAMsB,EAA+B,UAAzD,QACA,kBAAC,EAAD,CAActB,KAAM,kBAAMsB,EAA+B,YAAzD,UACA,kBAAC,EAAD,CAActB,KAAM,kBAAMsB,EAA+B,UAAzD,QACA,kBAAC,EAAD,CAActB,KAAM,kBAAM4B,GAAoBD,IAAkBc,WAAS,GAAzE,WAGJ,kBAAClD,EAAD,CAAeW,QAAS,kBAAM4B,GAAiB,KAC3C,kBAAC,EAAD,SAKnBD,EACG,kBAACpC,EAAD,KACI,kBAACC,EAAD,KACI,4CACA,wGACA,4FACA,0GACA,sFACA,kBAACC,EAAD,CAAeO,QAAS,kBAAM4B,GAAiB,KAA/C,uBAGNY,I,wBChHLC,EAAavE,IAAOC,IAAV,6EAAGD,CAAH,4EAEf,SAAAQ,GAAK,MAAoB,aAAhBA,EAAMgE,MAAN,cAAoChE,EAAMgE,MAA1C,gCAIC,SAAAhE,GAAK,MAAoB,aAAhBA,EAAMgE,OAAN,oCCKZC,EATF,SAAC,GAA0C,IAAxCC,EAAuC,EAAvCA,KAAMC,EAAiC,EAAjCA,KAAMC,EAA2B,EAA3BA,UAAWC,EAAgB,EAAhBA,UAEnC,OACI,kBAACN,EAAD,CAAYC,MAAOI,EAAW9C,QAAS+C,EAAWH,KAAMA,EAAMC,KAAMA,K,+XCJrE,IAAMG,EAAmB9E,IAAOC,IAAV,uFAAGD,CAAH,0PAcvBI,GAGA2E,EAAUC,YAAH,KAmBAC,EAAQjF,IAAOC,IAAV,4EAAGD,CAAH,oFAULkF,EAAalF,IAAOmF,KAAV,iFAAGnF,CAAH,8JAON+E,GCxCFK,EAZG,SAAC,GAAD,QAAGC,MAASC,EAAZ,EAAYA,UAAWC,EAAvB,EAAuBA,WAAYC,EAAnC,EAAmCA,oBAAnC,OACd,kBAACV,EAAD,KACI,kBAACG,EAAD,eAAc,8BAAOK,GACjB,kBAACJ,EAAD,CACIO,IAAG,UAAKF,GAAL,QAA0C,IAAxBC,EAA+B,IAAM,MAEzDD,MCRJG,EAAa1F,IAAOC,IAAV,gFAAGD,CAAH,4JAYV2F,EAAW3F,IAAO4F,GAAV,8EAAG5F,CAAH,8CAIR6F,EAAU7F,IAAOC,IAAV,6EAAGD,CAAH,8FASP8F,EAAQ9F,IAAOmF,KAAV,2EAAGnF,CAAH,sCCLH+F,EAfS,SAAC,GAAD,QAAGV,MAASC,EAAZ,EAAYA,UAAWU,EAAvB,EAAuBA,OAAU7C,EAAjC,EAAiCA,aAAjC,OACpB,kBAACuC,EAAD,KACI,kBAAC,EAAD,KACI,kBAACC,EAAD,kBACA,kBAACE,EAAD,KACI,+CACA,6BAAK,kBAACC,EAAD,KAAQR,GAAb,WACA,mCACA,6BAAK,kBAACQ,EAAD,KAAQE,GAAb,WAEJ,kBAAC,EAAD,CAAWpE,KAAM,kBAAMuB,EAAa,iBAApC,kB,8bCfL,IAAM8C,GAAcjG,IAAOC,IAAV,oFAAGD,CAAH,qmBAKd,SAAAQ,GAAK,OAAIA,EAAMmD,QAIf,SAAAnD,GAAK,OAAIA,EAAM0F,QAaH,SAAA1F,GAAK,OAAIA,EAAMmD,QAEvB,SAAAnD,GAAK,OAAIA,EAAMmD,QAKf,SAAAnD,GAAK,OAAIA,EAAM0F,QAOhBC,GAAQnB,YAAH,MAkBLoB,GAAepG,IAAOiB,OAAV,qFAAGjB,CAAH,wNAUJmG,IAKRE,GAAyBrG,IAAOC,IAAV,+FAAGD,CAAH,mCAEzB,SAAAQ,GAAK,OAAIA,EAAMmD,KAAO,EAAItD,YAAjB,UAIbiE,K,QC7EOgC,GAAc,CAAC,IAAK,KAAM,KAAM,MAAO,MAAO,MAAO,MAAO,OAsBnEC,GAA6B,SAACC,GAEhC,IAcwBC,EAdlBC,EAAe,SAACC,GAElB,IADA,IAAIC,OAAgBtC,EACXuC,EAAI,EAAGA,EAAIF,EAAaG,OAAQD,IAAK,CAC1C,IAAK,IAAIxE,EAAI,EAAGA,EAAIsE,EAAaE,GAAGC,OAAS,EAAGzE,IACxCsE,EAAaE,GAAGxE,GAAG,KAAOsE,EAAaE,GAAGxE,EAAI,GAAG,KACjDuE,GAAgB,GAGxB,IAAsB,IAAlBA,EAAwB,MAEhC,OAAsB,IAAlBA,GAOFG,GAHkBN,EAGsBD,GAF7B,GAAGQ,KAAI,SAACC,EAAKJ,GAAN,OAAYJ,EAAMO,KAAI,SAAAE,GAAG,OAAIA,EAAIL,SAInDM,EAAcT,EAAaF,GAC3BY,EAAcV,EAAaK,GACjC,OAAoB,IAAhBI,IAAwC,IAAhBC,G,+NCpChC,IAmIeC,GAnIG,SAAC,GAAqE,IAAD,IAAlEtE,eAAkBY,EAAgD,EAAhDA,KAAMC,EAA0C,EAA1CA,QAASC,EAAiC,EAAjCA,WAAcV,EAAmB,EAAnBA,aAAmB,EAEjDG,mBDTP,SAACK,EAAMuC,EAAMrC,GAaxC,IAZA,IAAMyD,EAAUC,SAAS5D,GACnB6D,EAAUD,SAASrB,GAEnBuB,EAAgB,kBAClBC,MAAMC,KAAKD,MAAMJ,IAAU,SAACM,EAAGC,GAAJ,OACvB,IAAIH,MAAMF,GAASM,OAAOd,KAAI,SAACe,EAAKC,GAAN,MAC1B,CAACH,EAAGG,EAAK1B,GAAY2B,KAAKC,MAAMD,KAAKE,SAAWtE,YAIxDuE,EAAeX,KAEXlB,GAA2B6B,IAC/BA,EAAeX,IAGnB,OAAOW,ECRoCC,CAAgB1E,EAAMC,EAASC,IAFS,mBAE5EyE,EAF4E,KAEjEC,EAFiE,OAGrCjF,oBAAS,GAH4B,mBAG5EkF,EAH4E,KAG3DC,EAH2D,OAIzDnF,mBAAS,CAC/BgC,UAAW,EACXC,WAAW,GACXC,qBAAqB,EACrBQ,OAAQ,IARuE,mBAI5EX,EAJ4E,KAIrEqD,EAJqE,OAW7BpF,oBAAS,GAXoB,mBAW5EqF,EAX4E,KAWvDC,EAXuD,KAa7EC,EACsB,IADtBA,EAEe,GAGfC,EAAkB,SAACC,EAAOC,EAAiBC,EAAiBC,EAAkBC,EAAYC,GAC5F,IAAKA,EAAL,CAAgBR,GAAuB,GAKvC,IAAMS,EDqBuB,SAACL,EAAiBC,EAAiBC,EAAkBC,GAEtF,IAAMG,EAAiB,SAACC,EAAMC,GAC1B,IAAK,IAAI3C,EAAI,EAAGA,EAAI0C,EAAKzC,OAAQD,IAC7B,GAAI0C,EAAK1C,KAAO2C,EAAK3C,GAEjB,OAAO,EAIf,OAAO,GAGL4C,EAAqB,SAACC,EAAaC,GACrC,IAAK,IAAIC,EAAU,EAAGA,EAAUF,EAAY5C,OAAQ8C,IAChD,GAAIN,EAAeI,EAAYE,GAAUD,GAErC,OAAO,EAIf,OAAO,GAILE,EAAO,SAACC,EAAYC,EAAYC,GAClC,IACMC,EAAOH,EAAa,EACpBI,EAAOH,EAAa,EACpBI,EAAQJ,EAAa,EAGrBK,EAAgB,SAACC,GACnB,QAA8B/F,IAA1B6E,EAAWkB,IAGPlB,EAAWkB,GAAWN,GAAY,KAAOC,EAAa,CAGtD,IAAMM,EAAYnB,EAAWkB,GAAWN,GAEnCN,EAAmBc,EAAoBD,IAGxCC,EAAmBC,KAAK,CAACH,EAAWN,EAAYC,MAK1DS,EAAmB,SAACJ,GACtB,QAA0C/F,IAAtC6E,EAAWW,GAAYO,IAEnBlB,EAAWW,GAAYO,GAAW,KAAOL,EAAa,CAEtD,IAAMM,EAAYnB,EAAWW,GAAYO,GAEpCZ,EAAmBc,EAAoBD,IACxCC,EAAmBC,KAAK,CAACV,EAAYO,EAAWL,MAYhE,OANAI,EArCWN,EAAa,GAsCxBM,EAAcH,GACdQ,EAAiBP,GACjBO,EAAiBN,GAGVI,GAILA,EAAqB,CAAC,CAACvB,EAAiBC,EAAiBC,IAU/D,GALAW,EAAKb,EAAiBC,EAAiBC,GAKL,IAA9BqB,EAAmBzD,OAAvB,CAII,IAAK,IAAID,EAAI,EAAGA,EAAI0D,EAAmBzD,OAAQD,IAC3CgD,EAAKU,EAAmB1D,GAAG,GAAI0D,EAAmB1D,GAAG,GAAI0D,EAAmB1D,GAAG,IAKvF,OAAO0D,GClHqBG,CAAsB1B,EAAiBC,EAAiBC,EAAkBC,GAElG,QAAwB7E,IAApB+E,EAAJ,CAEI,IAAMsB,EDkHuB,SAACC,EAAoBzB,GAI1D,IAFA,IAAI0B,EAAQ,aAAO1B,GAEVtC,EAAI,EAAGA,EAAI+D,EAAmB9D,OAAQD,IAAK,CAChD,IAAMnC,EAAOkG,EAAmB/D,GAAG,GAC7BlC,EAAOiG,EAAmB/D,GAAG,GACnCgE,EAASnG,GAAMC,GAAM,GAAK,WAE9B,OAAOkG,EC3HoCC,CAA0BzB,EAAiBF,GAC9EZ,EAAaoC,GACbjC,E,2WAAS,CAAD,GACDrD,EADC,CAEJC,UAAWD,EAAMC,UAAY+D,EAAgBvC,OAC7CvB,WAAW,IAAD,OAAM8D,EAAgBvC,QAChCtB,qBAAsBH,EAAMG,oBAC5BQ,OAAQX,EAAMW,OAAS,KAG3B,IAAM+E,EAAgB,SAACC,GACnB,OAAO,IAAIC,SAAQ,SAAAC,GACfC,YAAW,kBAAMD,EDkHF,SAACE,EAAgBvH,GAKhD,IAJA,IAAMwH,EAAgB,aAAOD,GACzBE,EAAyB,GACzBC,EAAuB,GAElB1E,EAAI,EAAGA,EAAIwE,EAAiBvE,OAAQD,IAAK,CAE9C,IAAK,IAAIxE,EAAI,EAAGA,EAAIgJ,EAAiBxE,GAAGC,OAAQzE,IAC5C,GAAkC,aAA9BgJ,EAAiBxE,GAAGxE,GAAG,GAAmB,CAC1C,IAAMqC,EAAO2G,EAAiBxE,GAAGxE,GAAG,GAC9BsC,EAAO0G,EAAiBxE,GAAGxE,GAAG,GAE9BmC,EAAQ6G,EAAiBxE,GAAGxE,GAAG,GACrCiJ,EAAuBd,KAAK,CAAC9F,EAAMC,EAAMH,IACrCE,EAAO,GAAK,GACZ6G,EAAqBf,KAAK,CAAC9F,EAAO,EAAGC,IAMjD,GAAI2G,EAAuBxE,OAAS,GAAqC,IAAhCyE,EAAqBzE,OAAc,CAGxE,IAFA,IAAI0E,EAA2BH,EAEtBxE,EAAI,EAAGA,EAAIyE,EAAuBxE,OAAQD,IAAK,CACpD,IAAMnC,EAAO4G,EAAuBzE,GAAG,GACjClC,EAAO2G,EAAuBzE,GAAG,GACjC4E,EAAWnF,GAAY2B,KAAKC,MAAMD,KAAKE,SAAWtE,IAExD2H,EAAyB9G,GAAMC,GAAM,GAAK8G,EAG9C,MAIJ,GAAIF,EAAqBzE,OAAS,EAAG,CAGjC,IAFA,IAAI4E,EAAqBL,EAEhBxE,EAAI,EAAGA,EAAI0E,EAAqBzE,OAAQD,IAAK,CAClD,IAAM8E,EAAeL,EAAuBzE,GAAG,GACzC+E,EAAeN,EAAuBzE,GAAG,GACzCgF,EAAeN,EAAqB1E,GAAG,GACvCiF,EAAeP,EAAqB1E,GAAG,GACvCkF,EAAgBL,EAAmBG,GAAcC,GAAc,GAErEJ,EAAmBC,GAAcC,GAAc,GAAKG,EACpDL,EAAmBG,GAAcC,GAAc,GAAK,WAGxD,OAKR,OAAIR,EAAuBxE,OAAS,EACzB,CAACuE,EAAkBC,EAAuBxE,QAGjB,IAAhCyE,EAAqBzE,QAAkD,IAAlCwE,EAAuBxE,OACrD,CAACuE,EAAkB,QAD9B,EC7KyCW,CAAoB1D,EAAWzE,MAAcmH,OAGxEiB,EAA2B,uCAAG,WAAOjB,GAAP,eAAAkB,EAAA,sEAGEnB,EAAcC,GAHhB,QAG1BmB,EAH0B,QAKR,GAAK,GACzB5D,EAAa4D,EAAoB,IAEjCF,EAA4BpD,IAEI,IAA3BsD,EAAoB,KAEU,SAAC3F,GAEhC,IAYwBC,EAZlBC,EAAe,SAACC,GAElB,IADA,IAAIC,OAAgBtC,EACXuC,EAAI,EAAGA,EAAIF,EAAaG,OAAQD,IAAK,CAC1C,IAAK,IAAIxE,EAAI,EAAGA,EAAIsE,EAAaE,GAAGC,OAAS,EAAGzE,IACxCsE,EAAaE,GAAGxE,GAAG,KAAOsE,EAAaE,GAAGxE,EAAI,GAAG,KAAIuE,GAAgB,GAE7E,IAAsB,IAAlBA,EAAwB,MAEhC,OAAsB,IAAlBA,GAOFG,GAHkBN,EAGsBD,GAF7B,GAAGQ,KAAI,SAACC,EAAKJ,GAAN,OAAYJ,EAAMO,KAAI,SAAAE,GAAG,OAAIA,EAAIL,SAInDM,EAAcT,EAAaF,GAC3BY,EAAcV,EAAaK,IACb,IAAhBI,IAAwC,IAAhBC,GAIxBqB,GAAmB,GAG3BlC,CAA2B4F,EAAoB,IAE/CvD,GAAuB,IA1CK,2CAAH,sDA8CjCqD,EAA4BpD,QAG5BD,GAAuB,KAK/B,OACI,oCACI,kBAAC,EAAD,CAAWvD,MAAOA,IAClB,kBAACgB,GAAD,CAAwB1C,KAAMA,GAC1B,kBAACsC,GAAD,CAAatC,KAAMA,EAAMuC,KAAMtC,QACZU,IAAdgE,GAA2BA,EAAUtB,KAClC,SAAAE,GAAG,OAAIA,EAAIF,KACP,SAACoF,EAAMpE,GAAP,OACI,kBAAC,EAAD,CACIvC,IAAKuC,EACLtD,KAAM0H,EAAK,GACXzH,KAAMyH,EAAK,GACXxH,UAAWwH,EAAK,GAChBvH,UACI,SAAAkE,GAAK,OAAID,EAAgBC,EAAOqD,EAAK,GAAIA,EAAK,GAAIA,EAAK,GAAI9D,EAAWK,cAUlG,kBAACvC,GAAD,CAActE,QAAS,kBAAM2G,GAAmB,KAAhD,YACED,OAGIlE,EAFF,kBAAC,EAAD,CAAiBe,MAAOA,EAAOlC,aAAcA,M,6kBC3B9CkJ,OApGf,WAAgB,IAAD,EAE+B/I,mBAAS,CACnDK,KAAM,EACNC,QAAS,EACTC,WAAY,IALD,mBAENd,EAFM,KAEUuJ,EAFV,OAQ+BhJ,mBAAS,GARxC,mBAQNiJ,EARM,KAQUC,EARV,KA2EPrJ,EAAe,SAACsJ,GACJ,gBAAZA,EAA2BD,EAAkB,GAC5B,cAAZC,GAAyBD,EAAkB,IAGhDE,EAAU,CACd,kBAAC,EAAD,CACE1J,sBAxE0B,SAAA+F,GAC5BA,EAAM4D,iBAD+B,IAE7B3I,EAAS+E,EAAM6D,OAAf5I,KACFE,EAAQqD,SAASwB,EAAM6D,OAAO1I,OAEhC2I,MAAM3I,GACRoI,EAAkB,MACbvJ,EADY,eAEdiB,EAAO,MAIVsI,EAAkB,MACbvJ,EADY,eAEdiB,EAAOE,MA2DVjB,qBAtDyB,SAAA8F,GAAU,IAC7B7E,EAAU6E,EAAM6D,OAAhB1I,MACF4I,EAAYvF,SAASrD,GAC3BoI,EAAkB,MACbvJ,EADY,CAEfc,WAAYiJ,MAkDZ5J,+BA9CmC,SAACW,GACpB,SAAfA,IAAwByI,EAAkB,CAAE3I,KAAM,EAAGC,QAAS,EAAGC,WAAY,IAAK2I,EAAkB,IACrF,WAAf3I,IAA0ByI,EAAkB,CAAE3I,KAAM,EAAGC,QAAS,EAAGC,WAAY,IAAK2I,EAAkB,IACvF,SAAf3I,IAAwByI,EAAkB,CAAE3I,KAAM,EAAGC,QAAS,EAAGC,WAAY,IAAK2I,EAAkB,KA4CrGzJ,eAAgBA,EAChBI,aAAcA,EACdC,mBAjCuB,SAAC2F,EAAOgE,EAAY/I,GAC7C+E,EAAM4D,iBACN,IAAMK,EAAYH,MAAMtF,SAASxE,EAAeiB,KAC7B,cAAf+I,EACaT,EAAkB,MAAKvJ,EAAlCiK,EAA4B,eAAuBhJ,EAAO,GAE3C,eAEdA,EAAOjB,EAAeiB,GAAQ,KAGb,cAAf+I,IACHC,EAAWV,EAAkB,MAAKvJ,EAAN,eAAuBiB,EAAO,KACrDjB,EAAeiB,GAAQ,GAC9BsI,EAAkB,MACbvJ,EADY,eAEdiB,EAAOuD,SAASxE,EAAeiB,IAAS,OAkB7CX,eA5CmB,SAAC0F,GAAW,IAAD,EACRA,EAAM6D,OAAtB5I,EADwB,EACxBA,KAAME,EADkB,EAClBA,OACA,KAAVA,GAAgBA,EAAQ,IAC1BiH,YAAW,kBAAMmB,EAAkB,MAC9BvJ,EAD6B,eAE/BiB,EAAO,OACN,OAwCN,kBAAC,GAAD,CAAWjB,eAAgBA,EAAgBI,aAAcA,KAG3D,OACE,kBAACpD,EAAD,KACE,kBAACG,EAAD,mBACCwM,EAAQH,KCzFKU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,GAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.84bc4190.chunk.js","sourcesContent":["import styled from 'styled-components/macro';\r\n\r\nexport const AppWrapper = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n`;\r\n\r\nexport const Header = styled.header`\r\n    font-size: 50px;\r\n    font-family: 'Orbitron', Arial, sans-serif;\r\n    font-weight: 700;\r\n    margin: 20px 0;\r\n    @media (max-width: 480px) {\r\n        font-size: 30px; \r\n    }\r\n`;","import styled, {css} from 'styled-components/macro';\r\n\r\nexport const RainbowBorder = css`\r\n    &::before {\r\n            content: '';\r\n            background: linear-gradient(45deg, #ff0000, #ff7300, #fffb00, #48ff00, #00ffd5, #002bff, #7a00ff, #ff00c8, #ff0000);\r\n            position: absolute;\r\n            top: -5px;\r\n            left: -5px;\r\n            width: calc(100% + 10px);\r\n            height: calc(100% + 10px);\r\n            z-index: -1;\r\n            filter: blur(5px);\r\n            opacity: 1;\r\n            transition: opacity .3s ease-in-out;\r\n            border-radius: 15px;\r\n        }\r\n\r\n\r\n    &::after {\r\n        z-index: -1;\r\n        content: '';\r\n        position: absolute;\r\n        width: 100%;\r\n        height: 100%;\r\n        background: white;\r\n        left: 0;\r\n        top: 0;\r\n        border-radius: 10px;\r\n    }\r\n`;\r\n\r\nexport const Wrapper = styled.div`\r\n    position: relative;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    width: 400px;\r\n    min-height: 70vh;\r\n    text-align: center;\r\n    margin: 0 auto;\r\n    background-color: white;\r\n    border-radius: 15px;\r\n    \r\n    @media (max-width: 480px) {\r\n        width: 80%;\r\n        height: 75vh; \r\n    }\r\n    ${RainbowBorder}\r\n`;\r\n","import styled, { css } from 'styled-components/macro';\r\nimport { RainbowBorder } from '../styled-container/styled-container.styled';\r\n\r\nexport const StartGameWrap = styled.div`\r\n    position: relative;\r\n    margin-top: ${props => props.fixMargin && '65px'};\r\n`;\r\n\r\nexport const Input = styled.input`\r\n    display: block;\r\n    font-size: 24px;\r\n    text-align: center;\r\n    width: 43px;\r\n    background: rgba(0,0,0, .1);\r\n\r\n    &[type=number]::-webkit-inner-spin-button,\r\n    [type=number]::-webkit-outer-spin-button {\r\n        -webkit-appearance: none;\r\n        -moz-appearance: textfield;\r\n        appearance: none;\r\n        margin: 0;\r\n    }\r\n    &[type=number] {\r\n        border: 2px solid rgba(0,0,0, .1);\r\n        border-radius: 4px;\r\n        -moz-appearance: textfield;\r\n    }\r\n`;\r\n\r\nexport const Select = styled.select`\r\n    display: block;\r\n    font-size: 24px;\r\n    text-align: center;\r\n    width: 115px;\r\n    background: rgba(0,0,0, .1);\r\n    border: 2px solid rgba(0,0,0, .1);\r\n    border-radius: 4px;\r\n\r\n    option {\r\n        border: 2px solid rgba(0,0,0, .1);\r\n        border-radius: 4px;\r\n    }\r\n    &:hover {\r\n        cursor: pointer;\r\n    }\r\n`;\r\n\r\nexport const Label = styled.div`\r\n    font-family: 'Orbitron', Arial, sans-serif;\r\n    font-size: 18px;\r\n    font-weight: 700;\r\n    margin-bottom: 10px;\r\n`;\r\n\r\nexport const NumberContainer = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    margin-bottom: 30px;\r\n`;\r\n\r\nexport const Arrow = styled.button`\r\n    position: relative;\r\n    width: 30px;\r\n    height: 30px;\r\n    background-color: transparent;\r\n    outline: none;\r\n    border: 2px solid rgba(0,0,0, .3);\r\n    border-radius: 10px;\r\n    margin: 0 15px;\r\n    padding: 0;\r\n\r\n    &::before,\r\n    &::after{\r\n        content: \"\";\r\n        position: absolute;\r\n        background-color: black;\r\n    }\r\n\r\n    /* Vertical line */\r\n    &::before{\r\n        ${props => props.plus && css`\r\n            top: 4px;\r\n            left: 50%;\r\n            width: 4px;\r\n            height: 70%;\r\n            margin-left: -2px;\r\n        `};\r\n    }\r\n    /* horizontal line */\r\n    &::after{\r\n        top: 50%;\r\n        left: 4px;\r\n        width: 70%;\r\n        height: 4px;\r\n        margin-top: -2px;\r\n    };\r\n    \r\n    &:hover{\r\n        cursor: pointer;\r\n        border: 2px solid black;\r\n    }\r\n`;\r\n\r\nexport const IconContainer = styled.div`\r\n    position: absolute;\r\n    display:flex;\r\n    justify-content: left;\r\n    ${props => props.top ? (\r\n        css`\r\n            top: 0;\r\n            padding: 15px 0 0 15px;\r\n            left: 0;\r\n            margin-bottom: 15px;\r\n    `) : (\r\n            css`\r\n            bottom: 0;\r\n            padding: 0 15px 15px 0;\r\n            right: 0;\r\n    `)\r\n    }\r\n    svg {\r\n        width: 40px;\r\n        height: 40px;\r\n        transition: fill .2s ease-in-out;\r\n\r\n        &:hover {\r\n            cursor: pointer;\r\n            ${props => props.top ? css`fill: rgba(0, 43, 255, .8);` : css`fill: rgba(68, 191, 46, .8);`\r\n    }\r\n    }\r\n`;\r\n\r\nexport const InfoModal = styled.div`\r\n    position:fixed;\r\n    top: 0;\r\n    background-color: rgba(255,255,255, 0.8);\r\n    width: 100vw;\r\n    height: 100vh;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n\r\n`;\r\n\r\nexport const InfoWrapper = styled.div`\r\n    position: relative;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    width: 400px;\r\n    text-align: center;\r\n    margin: 0 auto;\r\n    padding: 30px 0;\r\n    background-color: white;\r\n    border-radius: 15px;\r\n    \r\n    ${RainbowBorder}\r\n\r\n    @media (max-width: 480px) {\r\n        width: 80%;\r\n    }\r\n\r\n    @media (max-width: 900px) and (orientation: landscape) {\r\n        width: initial;\r\n        max-height: 70vh;\r\n    }\r\n\r\n\r\n    h1 {\r\n        font-weight: bold;\r\n        background: -webkit-linear-gradient(45deg, #002bff, #7a00ff, #ff00c8, #ff0000);\r\n        -webkit-background-clip: text;\r\n        -webkit-text-stroke: 4px transparent;\r\n        color: white;\r\n    }\r\n\r\n    span {\r\n        display: inline-block;\r\n        margin: 10px 30px;\r\n        text-align: left;\r\n\r\n        @media (max-width: 480px) {\r\n            margin: 10px 30px;\r\n        }\r\n    }\r\n    \r\n    \r\n`;\r\n\r\nexport const ConfirmButton = styled.button`\r\n    width: 150px;\r\n    margin: 15px auto;\r\n    font-size: 18px;\r\n    font-weight: bold;\r\n    color: rgba(0,0,0,.6);\r\n    border: 2px solid rgba(0,0,0,.6);\r\n    background-color: transparent;\r\n    padding: 5px 10px;\r\n    transition: border .3s ease-in-out, color .2s ease-in-out;\r\n\r\n    @media (max-width: 480px) {\r\n        border: 2px solid rgba(68, 191, 46, .8);\r\n        color: rgba(68, 191, 46, .8);\r\n    }\r\n    @media (max-width: 900px) and (orientation: landscape) {\r\n        border: 2px solid rgba(68, 191, 46, .8);\r\n        color: rgba(68, 191, 46, .8);\r\n    }\r\n\r\n\r\n    &:hover {\r\n        border: 2px solid rgba(68, 191, 46, .8);\r\n        color: rgba(68, 191, 46, .8);\r\n        cursor: pointer;\r\n    }\r\n    \r\n`;","import React from 'react';\r\n\r\nimport { Wrapper } from './styled-container.styled';\r\n\r\n\r\nconst StyledContainer = ({children}) => (\r\n    <Wrapper>\r\n        {children}\r\n    </Wrapper>\r\n)\r\n\r\nexport default StyledContainer;","import styled from 'styled-components/macro';\r\n\r\nexport const Button = styled.button`\r\n    position: relative;\r\n    z-index: 0;\r\n    width: 220px;\r\n    height: 50px;\r\n    font-family: 'Orbitron', Arial, sans-serif;\r\n    font-weight: 700;\r\n    font-size: 20px;\r\n    color: black;\r\n    border-width: 2px;\r\n    border-style: solid;\r\n    border-image: 0;\r\n    border-image-slice: 0;\r\n    border-color: black;\r\n    outline: none;\r\n    background: transparent;\r\n    margin: 10px auto;\r\n    transition: border-color .3s ease-in-out;\r\n\r\n    &:hover {\r\n        cursor: pointer;\r\n        border-image: linear-gradient(45deg, #ff0000, #ff7300, #fffb00, #48ff00, #00ffd5, #002bff, #7a00ff, #ff00c8, #ff0000);\r\n        border-image-slice: 1;\r\n        border-color: transparent;\r\n    }\r\n\r\n    @media (max-width: 480px) {\r\n        border-width: 1px;\r\n        &:hover {\r\n            border-image: 0;\r\n            border-image-slice: 0;\r\n            border-color: black;\r\n        }\r\n    }\r\n`;","import React from 'react';\r\n\r\nimport { Button } from './custom-button.styled';\r\n\r\n\r\nconst CustomButton = ({children, func, otherProps}) => (\r\n    <Button onClick={func} {...otherProps}>\r\n        {children}\r\n    </Button>\r\n)\r\n\r\nexport default CustomButton;","import React from 'react';\r\n\r\n\r\nconst Info = ({width, height}) =>\r\n<svg  xmlns=\"http://www.w3.org/2000/svg\" xmlnsXlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\r\n\t viewBox=\"0 0 512 512\" width={width} height={height}>\r\n<g>\r\n\t<g>\r\n\t\t<g>\r\n\t\t\t<circle cx=\"256\" cy=\"378.5\" r=\"25\"/>\r\n\t\t\t<path d=\"M256,0C114.516,0,0,114.497,0,256c0,141.484,114.497,256,256,256c141.484,0,256-114.497,256-256\r\n\t\t\t\tC512,114.516,397.503,0,256,0z M256,472c-119.377,0-216-96.607-216-216c0-119.377,96.607-216,216-216\r\n\t\t\t\tc119.377,0,216,96.607,216,216C472,375.377,375.393,472,256,472z\"/>\r\n\t\t\t<path d=\"M256,128.5c-44.112,0-80,35.888-80,80c0,11.046,8.954,20,20,20s20-8.954,20-20c0-22.056,17.944-40,40-40\r\n\t\t\t\tc22.056,0,40,17.944,40,40c0,22.056-17.944,40-40,40c-11.046,0-20,8.954-20,20v50c0,11.046,8.954,20,20,20\r\n\t\t\t\tc11.046,0,20-8.954,20-20v-32.531c34.466-8.903,60-40.26,60-77.469C336,164.388,300.112,128.5,256,128.5z\"/>\r\n\t\t</g>\r\n\t</g>\r\n</g>\r\n</svg>\r\n\r\nexport default Info;","import React from 'react';\r\n\r\n\r\nconst ReturnIco = ({width, height}) =>\r\n<svg version=\"1.1\" id=\"Capa_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlnsXlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 400 400\"\r\n\t width={width} height={height}>\r\n<g>\r\n\t<g>\r\n\t\t<path d=\"M199.997,0C89.72,0,0,89.72,0,200s89.72,200,199.997,200C310.279,400,400,310.28,400,200S310.279,0,199.997,0z\r\n\t\t\t M199.997,373.77c-95.811,0-173.766-77.953-173.766-173.77c0-95.817,77.955-173.77,173.766-173.77\r\n\t\t\tc95.824,0,173.772,77.953,173.772,173.77C373.77,295.816,295.82,373.77,199.997,373.77z\"/>\r\n\t\t<path d=\"M241.559,109.851c-5.123-5.124-13.43-5.124-18.547,0l-80.875,80.873c-2.46,2.459-3.843,5.796-3.843,9.273\r\n\t\t\tc0,3.478,1.383,6.813,3.843,9.272l80.875,80.875c2.562,2.562,5.918,3.844,9.273,3.844c3.354,0,6.719-1.281,9.272-3.844\r\n\t\t\tc5.123-5.119,5.123-13.426,0-18.545l-71.597-71.604l71.597-71.6C246.682,123.277,246.682,114.971,241.559,109.851z\"/>\r\n\t</g>\r\n</g>\r\n</svg>\r\n\r\nexport default ReturnIco;","import React, { useState } from 'react';\r\nimport {\r\n    Input,\r\n    Label,\r\n    Arrow,\r\n    NumberContainer,\r\n    StartGameWrap,\r\n    Select,\r\n    IconContainer,\r\n    InfoModal,\r\n    InfoWrapper,\r\n    ConfirmButton\r\n} from './start-screen.styled';\r\nimport StyledContainer from '../styled-container/styled-container.component';\r\nimport CustomButton from '../custom-button/custom-button.component';\r\nimport Info from '../../assets/svg-ico.component.jsx';\r\nimport ReturnIco from '../../assets/return-ico.component';\r\n\r\n\r\nconst StartScreen = ({\r\n    gameProperties,\r\n    changeBoardProperties,\r\n    changeGameDifficulty,\r\n    changeGamePropertiesSimpleGame,\r\n    switchScreen,\r\n    incrOrDecrInputVal,\r\n    checkValOnBlur }) => {\r\n\r\n    const [customiseStatus, setCustomiseStatus] = useState(false);\r\n    const [isInfoVisible, setisInfoVisible] = useState(false);\r\n\r\n    const { rows, columns, difficulty } = gameProperties;\r\n\r\n\r\n    return (\r\n        <>\r\n            <StyledContainer>\r\n                \r\n                {customiseStatus ? (\r\n                    <>\r\n                    <IconContainer top onClick={() => setCustomiseStatus(false)}>\r\n                        <ReturnIco/>\r\n                    </IconContainer>\r\n                    <StartGameWrap fixMargin>\r\n                        <Label>Number of rows (min. 3)</Label>\r\n                        <NumberContainer>\r\n                            <Arrow onClick={(e) => incrOrDecrInputVal(e, 'decrement', 'rows')} />\r\n                            <Input\r\n                                type='number'\r\n                                id='rows'\r\n                                name='rows'\r\n                                min='3'\r\n                                value={rows}\r\n                                onChange={changeBoardProperties}\r\n                                onBlur={checkValOnBlur}\r\n                            >\r\n                            </Input>\r\n                            <Arrow plus onClick={(e) => incrOrDecrInputVal(e, 'increment', 'rows')} />\r\n                        </NumberContainer>\r\n                        <Label>Number of columns (min. 3)</Label>\r\n                        <NumberContainer>\r\n                            <Arrow onClick={(e) => incrOrDecrInputVal(e, 'decrement', 'columns')} />\r\n                            <Input\r\n                                type='number'\r\n                                id='columns'\r\n                                name='columns'\r\n                                min='3'\r\n                                value={columns}\r\n                                onChange={changeBoardProperties}\r\n                                onBlur={checkValOnBlur}\r\n                            >\r\n                            </Input>\r\n                            <Arrow plus onClick={e => incrOrDecrInputVal(e, 'increment', 'columns')} />\r\n                        </NumberContainer>\r\n                        <Label>Number of colors</Label>\r\n                        <NumberContainer>\r\n                            <Select value={difficulty} onChange={changeGameDifficulty}>\r\n                                <option value=\"3\">3 colors</option>\r\n                                <option value=\"5\">5 colors</option>\r\n                                <option value=\"8\">8 colors</option>\r\n                            </Select>\r\n                        </NumberContainer>\r\n\r\n                        <CustomButton func={() => switchScreen('startGame')}>Start game</CustomButton>\r\n                    </StartGameWrap>\r\n                    </>\r\n\r\n                ) : (\r\n                        <>\r\n                            <StartGameWrap>\r\n                                <Label>Select level</Label>\r\n                                <CustomButton func={() => changeGamePropertiesSimpleGame('easy')}>Easy</CustomButton>\r\n                                <CustomButton func={() => changeGamePropertiesSimpleGame('medium')}>Medium</CustomButton>\r\n                                <CustomButton func={() => changeGamePropertiesSimpleGame('hard')}>Hard</CustomButton>\r\n                                <CustomButton func={() => setCustomiseStatus(!customiseStatus)} customise>Custom</CustomButton>\r\n\r\n                            </StartGameWrap>\r\n                            <IconContainer onClick={() => setisInfoVisible(true)}>\r\n                                <Info />\r\n                            </IconContainer>\r\n                        </>\r\n                    )}\r\n            </StyledContainer>\r\n            {isInfoVisible ?\r\n                <InfoModal>\r\n                    <InfoWrapper>\r\n                        <h1>How to play?</h1>\r\n                        <span>All you need to do is to click on the same color blocks to crush them.</span>\r\n                        <span>There should be at least two identical next to each other.</span>\r\n                        <span>Gain points for each one crushed and try not to lose all possible moves.</span>\r\n                        <span>Remember: the more you match, the better your score.</span>\r\n                        <ConfirmButton onClick={() => setisInfoVisible(false)}>I understand</ConfirmButton>\r\n                    </InfoWrapper>\r\n                </InfoModal>\r\n                : undefined\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default StartScreen;","import styled from 'styled-components/macro';\r\n\r\nexport const StyledCell = styled.div`\r\n    background-color: ${\r\n        props => props.color !== 'no-color' ? `hsl(${props.color}, 80%, 50%)` \r\n        : `transparent`\r\n    };\r\n    border-radius: 15px;\r\n    box-shadow: ${props => props.color !== 'no-color' && `1px 1px 2px 0 rgba(0,0,0, 0.5)`};\r\n    cursor: pointer;\r\n`;","import React from 'react';\r\n\r\nimport { StyledCell } from './cell.styled';\r\n\r\nconst Cell = ({ posX, posY, randColor, onClickFn }) => {\r\n\r\n    return (\r\n        <StyledCell color={randColor} onClick={onClickFn} posX={posX} posY={posY}>\r\n        \r\n        </StyledCell>\r\n    )\r\n}\r\n\r\nexport default Cell;","import styled, {keyframes} from 'styled-components/macro';\r\nimport {RainbowBorder} from '../styled-container/styled-container.styled';\r\n\r\nexport const UserScoreWrapper = styled.div`\r\n    position: relative;\r\n    display: flex;\r\n    justify-content: space-evenly;\r\n    align-items: center;\r\n    min-width: 250px;\r\n    max-width: 100%;\r\n    height: 70px;\r\n    font-size: 32px;\r\n    font-family: 'Orbitron', Arial, sans-serif;\r\n    margin: 20px 10px;\r\n    border-radius: 15px;\r\n    border: 1px solid transparent;\r\n\r\n    ${RainbowBorder}\r\n`;\r\n\r\nconst slideUp = keyframes`\r\n    0% {\r\n        opacity: 0;\r\n        transform: translateY(0px);\r\n    }\r\n    20% {\r\n        opacity: 1;\r\n        transform: translateY(-25px);\r\n    }\r\n    85% {\r\n        opacity: 1;\r\n        transform: translateY(-25px);  \r\n    }\r\n    100% {\r\n        opacity: 0;\r\n        transform: translateY(-25px);\r\n    }\r\n`;\r\n\r\nexport const Score = styled.div`\r\n    position: relative;\r\n    text-align: center;\r\n\r\n    span {\r\n        display: inline-block;\r\n        min-width: 70px;\r\n    }\r\n`;\r\n\r\nexport const AddedScore = styled.span`\r\n    position: absolute;\r\n    font-size: 24px;\r\n    right: 0;\r\n    color: gold;\r\n    text-shadow: -1px 0 black, 0 1px black, 1px 0 black, 0 -1px black;\r\n    opacity: 0;\r\n    animation: ${slideUp} 1s ease-in-out;\r\n`;","import React from 'react';\r\n\r\nimport { UserScoreWrapper, Score, AddedScore } from './userScore.styled';\r\n\r\nconst UserScore = ({ score: { userScore, addedScore, addedScoreCssHelper } }) => (\r\n    <UserScoreWrapper>\r\n        <Score>Score: <span>{userScore}</span>\r\n            <AddedScore\r\n                key={`${addedScore}${addedScoreCssHelper === true ? 'Y' : 'N'}`}\r\n            >\r\n                {addedScore}\r\n            </AddedScore>\r\n        </Score>\r\n    </UserScoreWrapper>\r\n)\r\n\r\nexport default UserScore;","import styled from 'styled-components/macro';\r\n\r\nexport const GameFinish = styled.div`\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    width: 100vw;\r\n    height: 100vh;\r\n    background-color: rgba(255,255,255, 0.8);\r\n`;\r\n\r\nexport const GameOver = styled.h1`\r\n    font-family: 'Orbitron', Arial, sans-serif;\r\n`;\r\n\r\nexport const Summary = styled.div`\r\n    font-family: 'Orbitron', Arial, sans-serif;\r\n    > * {\r\n        line-height: 30px;\r\n        height: 30px;\r\n        margin: 10px 0;\r\n    }\r\n`;\r\n\r\nexport const Value = styled.span`\r\n    font-size: 24px;\r\n    font-weight: bold;\r\n`;","import React from 'react';\r\n\r\nimport { GameFinish, GameOver, Summary, Value } from './game-finish.styled';\r\nimport StyledContainer from '../styled-container/styled-container.component';\r\nimport PlayAgain from '../custom-button/custom-button.component';\r\n\r\n\r\nconst GameFinishModal = ({ score: { userScore, clicks }, switchScreen }) => (\r\n    <GameFinish>\r\n        <StyledContainer>\r\n            <GameOver>Game over</GameOver>\r\n            <Summary>\r\n                <div>You've scored:</div>\r\n                <div><Value>{userScore}</Value> points</div>\r\n                <div>in</div>\r\n                <div><Value>{clicks}</Value> moves</div>\r\n            </Summary>\r\n            <PlayAgain func={() => switchScreen('restartGame')}>Play again?</PlayAgain>\r\n        </StyledContainer>\r\n    </GameFinish>\r\n)\r\n\r\nexport default GameFinishModal;","import styled, { css, keyframes } from 'styled-components/macro';\r\n\r\nexport const StyledBoard = styled.div`\r\n    display: grid;\r\n    padding: 10px;\r\n    border-radius: 15px;\r\n    grid-template-rows: repeat(\r\n        ${props => props.rows},\r\n        minmax(40px, 50px)\r\n    );\r\n    grid-template-columns: repeat(\r\n        ${props => props.cols},\r\n        minmax(40px, 50px)\r\n    );\r\n    background:\r\n        radial-gradient(black -20%, transparent 16%) 0 0,\r\n        radial-gradient(black -20%, transparent 16%) 8px 8px,\r\n        radial-gradient(rgba(255,255,255,.1) 15%, transparent 20%) 0 1px,\r\n        radial-gradient(rgba(255,255,255,.1) 15%, transparent 20%) 8px 9px;\r\n    background-color:#a3a3a3;\r\n    background-size:16px 16px;\r\n    grid-gap: 3px;\r\n\r\n    @media (max-width: 480px) {\r\n        width: calc(${props => props.rows} * 43px);\r\n        grid-template-rows: repeat(\r\n            ${props => props.rows},\r\n            minmax(40px, 1fr)\r\n           \r\n        );\r\n        grid-template-columns: repeat(\r\n            ${props => props.cols},\r\n            minmax(40px, 1fr)\r\n        ); \r\n    }\r\n    \r\n`;\r\n\r\nexport const shake = keyframes`\r\n  10%, 90% {\r\n    transform: translate3d(-1px, 0, 0);\r\n  }\r\n  \r\n  20%, 80% {\r\n    transform: translate3d(2px, 0, 0);\r\n  }\r\n\r\n  30%, 50%, 70% {\r\n    transform: translate3d(-4px, 0, 0);\r\n  }\r\n\r\n  40%, 60% {\r\n    transform: translate3d(4px, 0, 0);\r\n}\r\n`;\r\n\r\nexport const ResignButton = styled.button`\r\n    font-size: 24px;\r\n    font-family: 'Orbitron', Arial, sans-serif;\r\n    background: transparent;\r\n    border: 1px solid black;\r\n    padding: 5px 20px;\r\n    margin: 20px 0;\r\n\r\n    &:hover {\r\n        cursor: pointer;\r\n        animation: ${shake} 0.82s cubic-bezier(.36,.07,.19,.97) both;\r\n        \r\n    }\r\n`;\r\n\r\nexport const BoardOverflowControler = styled.div`\r\n    @media (max-width: 480px) {\r\n        ${props => props.rows > 8 ? css`\r\n        width: 100%;\r\n        overflow-x: auto;\r\n    `\r\n    : undefined\r\n    }\r\n    }\r\n`;\r\n","export const colorsArray = ['0', '27', '59', '103', '170', '229', '268', '312'];\r\n\r\nexport const createGameBoard = (rows, cols, difficulty) => {\r\n    const intRows = parseInt(rows);\r\n    const intCols = parseInt(cols);\r\n\r\n    const generateArray = () =>\r\n        Array.from(Array(intRows), (n, k) =>\r\n            new Array(intCols).fill().map((val, idx) =>\r\n                [k, idx, colorsArray[Math.floor(Math.random() * difficulty)]]\r\n            )\r\n        )\r\n\r\n    let createdArray = generateArray();\r\n\r\n    while (!checkBoardForPossibleMoves(createdArray)) {\r\n        createdArray = generateArray();\r\n    }\r\n\r\n    return createdArray;\r\n}\r\n\r\nconst checkBoardForPossibleMoves = (arrayToCheckAfterUpdate) => {\r\n\r\n    const checkingLoop = (arrayToCheck) => {\r\n        let possibilities = undefined;\r\n        for (let i = 0; i < arrayToCheck.length; i++) {\r\n            for (let y = 0; y < arrayToCheck[i].length - 1; y++) {\r\n                if (arrayToCheck[i][y][2] === arrayToCheck[i][y + 1][2]) {\r\n                    possibilities = true;\r\n                }\r\n            }\r\n            if (possibilities === true) break;\r\n        }\r\n        if (possibilities === true) return true;\r\n        else return false;\r\n    }\r\n\r\n    const transposeArray = (array) => {\r\n        return array[0].map((col, i) => array.map(row => row[i]));\r\n    }\r\n    const transposedArrayToCheck = transposeArray(arrayToCheckAfterUpdate);\r\n\r\n    const checkedRows = checkingLoop(arrayToCheckAfterUpdate);\r\n    const checkedCols = checkingLoop(transposedArrayToCheck);\r\n    if (checkedRows === true || checkedCols === true) {\r\n        return true;\r\n    }\r\n    else {\r\n        return false;\r\n    };\r\n}\r\n\r\n\r\nexport const checkSurroundingCells = (eventTargetPosX, eventTargetPosY, eventTargetColor, stateBoard) => {\r\n\r\n    const haveSameValues = (arr1, arr2) => {\r\n        for (let i = 0; i < arr1.length; i++) {\r\n            if (arr1[i] !== arr2[i]) {\r\n                // different value exist in two arrays value comparison\r\n                return false;\r\n            }\r\n        }\r\n        // two arrays values are the same\r\n        return true;\r\n    }\r\n\r\n    const checkELemExistence = (testedArray, benchmarkArr) => {\r\n        for (let arrElem = 0; arrElem < testedArray.length; arrElem++) {\r\n            if (haveSameValues(testedArray[arrElem], benchmarkArr)) {\r\n                // element exists\r\n                return true\r\n            }\r\n        }\r\n        // element doesn't exist\r\n        return false;\r\n    }\r\n\r\n    // scaning function to find cells matching color with target\r\n    const scan = (targetPosX, targetPosY, targetColor) => {\r\n        const up = targetPosX - 1;\r\n        const down = targetPosX + 1;\r\n        const left = targetPosY - 1;\r\n        const right = targetPosY + 1;\r\n\r\n\r\n        const checkUpOrDown = (direction) => {\r\n            if (stateBoard[direction] !== undefined) {\r\n                //above or below element exists\r\n\r\n                if (stateBoard[direction][targetPosY][2] === targetColor) {\r\n                    //color matches\r\n\r\n                    const benchmark = stateBoard[direction][targetPosY];\r\n\r\n                    if (!checkELemExistence(surroundingsColors, benchmark)) {\r\n                        //if the same value doesn't exist push new element to array\r\n\r\n                        surroundingsColors.push([direction, targetPosY, targetColor])\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        const checkLeftOrRight = (direction) => {\r\n            if (stateBoard[targetPosX][direction] !== undefined) {\r\n\r\n                if (stateBoard[targetPosX][direction][2] === targetColor) {\r\n\r\n                    const benchmark = stateBoard[targetPosX][direction];\r\n\r\n                    if (!checkELemExistence(surroundingsColors, benchmark)) {\r\n                        surroundingsColors.push([targetPosX, direction, targetColor])\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        checkUpOrDown(up);\r\n        checkUpOrDown(down);\r\n        checkLeftOrRight(left);\r\n        checkLeftOrRight(right);\r\n\r\n        // return surroundingsColors array filled with cells matching color with target (result of scan =>)\r\n        return surroundingsColors;\r\n    }\r\n\r\n    // first element in surroundingsColors array is filled with target position\r\n    const surroundingsColors = [[eventTargetPosX, eventTargetPosY, eventTargetColor]];\r\n\r\n    // *** checkSurroundingCells execution start ***\r\n    \r\n    // #1 Find if there are cells matching color with target\r\n    scan(eventTargetPosX, eventTargetPosY, eventTargetColor);\r\n\r\n    // #2 if there are no cells matching color with target then checkSurroundingCells => undefined\r\n    // -- surroundingsColors.length will match at least 1, because array is filled with target --\r\n\r\n    if (surroundingsColors.length === 1) return;\r\n\r\n    // #3 else fill array with cells matching color with target\r\n    else {\r\n        for (let i = 1; i < surroundingsColors.length; i++) {\r\n            scan(surroundingsColors[i][0], surroundingsColors[i][1], surroundingsColors[i][2]);\r\n        }\r\n    }\r\n\r\n    // #4 checkSurroundingCells => filled surroundingsColors array\r\n    return surroundingsColors;\r\n    //\r\n}\r\n\r\nexport const removeColorFromFoundCells = (foundElementsArray, stateBoard) => {\r\n\r\n    let newBoard = [...stateBoard];\r\n\r\n    for (let i = 0; i < foundElementsArray.length; i++) {\r\n        const posX = foundElementsArray[i][0];\r\n        const posY = foundElementsArray[i][1];;\r\n        newBoard[posX][posY][2] = 'no-color';\r\n    }\r\n    return newBoard;\r\n}\r\n\r\nexport const fillEmptyColorCells = (boardFromState, difficulty) => {\r\n    const updatedGameBoard = [...boardFromState];\r\n    let colorEmptiedCellsArray = [];\r\n    let cellsToPullColorFrom = [];\r\n\r\n    for (let i = 0; i < updatedGameBoard.length; i++) {\r\n\r\n        for (let y = 0; y < updatedGameBoard[i].length; y++) {\r\n            if (updatedGameBoard[i][y][2] === 'no-color') {\r\n                const posX = updatedGameBoard[i][y][0];\r\n                const posY = updatedGameBoard[i][y][1];\r\n                // color needed for further replacing 'empty color' in last iteration\r\n                const color = updatedGameBoard[i][y][2];\r\n                colorEmptiedCellsArray.push([posX, posY, color]);\r\n                if (posX - 1 >= 0) {\r\n                    cellsToPullColorFrom.push([posX - 1, posY])\r\n                }\r\n            }\r\n\r\n        }\r\n        // if it finds 'empty color' cells in this iteration, but at the top lvl (no cells to pull from above) => generate colors for them\r\n        if (colorEmptiedCellsArray.length > 0 && cellsToPullColorFrom.length === 0) {\r\n            let newBoardAfterColorChange = updatedGameBoard;\r\n\r\n            for (let i = 0; i < colorEmptiedCellsArray.length; i++) {\r\n                const posX = colorEmptiedCellsArray[i][0];\r\n                const posY = colorEmptiedCellsArray[i][1];\r\n                const newColor = colorsArray[Math.floor(Math.random() * difficulty)];\r\n\r\n                newBoardAfterColorChange[posX][posY][2] = newColor;\r\n            }\r\n            // break updatedGameBoard row iteration\r\n            break;\r\n        }\r\n\r\n        // if after this iteration (row), elements to pull exist => pull\r\n        if (cellsToPullColorFrom.length > 0) {\r\n            let newBoardAfterPulls = updatedGameBoard;\r\n\r\n            for (let i = 0; i < cellsToPullColorFrom.length; i++) {\r\n                const posXReceiver = colorEmptiedCellsArray[i][0];\r\n                const posYReceiver = colorEmptiedCellsArray[i][1];\r\n                const posXProvider = cellsToPullColorFrom[i][0];\r\n                const posYProvider = cellsToPullColorFrom[i][1];\r\n                const providerColor = newBoardAfterPulls[posXProvider][posYProvider][2];\r\n\r\n                newBoardAfterPulls[posXReceiver][posYReceiver][2] = providerColor;\r\n                newBoardAfterPulls[posXProvider][posYProvider][2] = 'no-color';\r\n            }\r\n\r\n            break;\r\n        }\r\n    }\r\n\r\n    // if there are still 'emptied color' cells\r\n    if (colorEmptiedCellsArray.length > 0) {\r\n        return [updatedGameBoard, colorEmptiedCellsArray.length];\r\n    }\r\n    // if there are no cells to pull from, and there are no 'emptied color' cells => condition to stop filling\r\n    if (cellsToPullColorFrom.length === 0 && colorEmptiedCellsArray.length === 0) {\r\n        return [updatedGameBoard, 0];\r\n    }\r\n}","import React, { useState } from 'react';\r\n\r\nimport Cell from '../cell/cell.component';\r\nimport UserScore from '../userScore/userScore.component';\r\nimport GameFinishModal from '../game-finish/game-finish.component';\r\n\r\nimport { StyledBoard, ResignButton, BoardOverflowControler } from './game-board.styled';\r\n\r\nimport { createGameBoard, checkSurroundingCells, removeColorFromFoundCells, fillEmptyColorCells } from '../utils/game-board.utils';\r\nconst GameBoard = ({ gameProperties: { rows, columns, difficulty }, switchScreen }) => {\r\n\r\n    const [gameBoard, setGameBoard] = useState(createGameBoard(rows, columns, difficulty));\r\n    const [areAnyMovesLeft, setAreAnyMovesLeft] = useState(true);\r\n    const [score, setScore] = useState({\r\n        userScore: 0,\r\n        addedScore: ``,\r\n        addedScoreCssHelper: true,\r\n        clicks: 0\r\n    });\r\n\r\n    const [preventAnotherClick, setPreventAnotherClick] = useState(false);\r\n\r\n    const delayValuesForBoardIterations = {\r\n        transparentCellsAppear: 100,\r\n        subsequentPulls: 50\r\n    }\r\n\r\n    const handleCellClick = (event, eventTargetPosX, eventTargetPosY, eventTargetColor, stateBoard, isBlocked) => {\r\n        if (!isBlocked) setPreventAnotherClick(true);\r\n        else return;\r\n\r\n        // check if surrounding cells match color with target\r\n        // if there are matching cells -> fill array with them, otherwise => undefined\r\n        const foundCellsArray = checkSurroundingCells(eventTargetPosX, eventTargetPosY, eventTargetColor, stateBoard);\r\n\r\n        if (foundCellsArray !== undefined) {\r\n            // #1 Remove color for found elements and update state array\r\n            const boardWithcolorEmptiedCells = removeColorFromFoundCells(foundCellsArray, stateBoard);\r\n            setGameBoard(boardWithcolorEmptiedCells);\r\n            setScore({\r\n                ...score,\r\n                userScore: score.userScore + foundCellsArray.length,\r\n                addedScore: `+${foundCellsArray.length}`,\r\n                addedScoreCssHelper: !score.addedScoreCssHelper,\r\n                clicks: score.clicks + 1\r\n            })\r\n\r\n            const timeoutThisFn = (delayVal) => {\r\n                return new Promise(resolve => {\r\n                    setTimeout(() => resolve(fillEmptyColorCells(gameBoard, difficulty)), delayVal);\r\n                });\r\n            }\r\n            const dispatchFillEmptyColorCells = async (delayVal) => {\r\n\r\n                // sequence of switching cells colors\r\n                const updatedGameBoardArr = await timeoutThisFn(delayVal);\r\n\r\n                if (updatedGameBoardArr[1] > 0) {\r\n                    setGameBoard(updatedGameBoardArr[0]);\r\n                    // subsequent iterations with diffrent from first delay\r\n                    dispatchFillEmptyColorCells(delayValuesForBoardIterations.subsequentPulls);\r\n                }\r\n                else if (updatedGameBoardArr[1] === 0) {\r\n                    // check if there are any moves left for player\r\n                    const checkBoardForPossibleMoves = (arrayToCheckAfterUpdate) => {\r\n\r\n                        const checkingLoop = (arrayToCheck) => {\r\n                            let possibilities = undefined;\r\n                            for (let i = 0; i < arrayToCheck.length; i++) {\r\n                                for (let y = 0; y < arrayToCheck[i].length - 1; y++) {\r\n                                    if (arrayToCheck[i][y][2] === arrayToCheck[i][y + 1][2]) possibilities = true;\r\n                                }\r\n                                if (possibilities === true) break;\r\n                            }\r\n                            if (possibilities === true) return true;\r\n                            else return false;\r\n                        }\r\n\r\n                        const transposeArray = (array) => {\r\n                            return array[0].map((col, i) => array.map(row => row[i]));\r\n                        }\r\n                        const transposedArrayToCheck = transposeArray(arrayToCheckAfterUpdate);\r\n\r\n                        const checkedRows = checkingLoop(arrayToCheckAfterUpdate);\r\n                        const checkedCols = checkingLoop(transposedArrayToCheck);\r\n                        if (checkedRows === true || checkedCols === true) {\r\n                            return;\r\n                        }\r\n                        else {\r\n                            setAreAnyMovesLeft(false);\r\n                        };\r\n                    }\r\n                    checkBoardForPossibleMoves(updatedGameBoardArr[0]);\r\n\r\n                    setPreventAnotherClick(false);\r\n                }\r\n            };\r\n            // #2 Begin sequence of switching and filling colors (value of first delay)\r\n            dispatchFillEmptyColorCells(delayValuesForBoardIterations.transparentCellsAppear);\r\n        }\r\n        else {\r\n            setPreventAnotherClick(false);\r\n            return;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <UserScore score={score} />\r\n            <BoardOverflowControler rows={rows}>\r\n                <StyledBoard rows={rows} cols={columns}>\r\n                    {gameBoard !== undefined && gameBoard.map(\r\n                        row => row.map(\r\n                            (cell, idx) => (\r\n                                <Cell\r\n                                    key={idx}\r\n                                    posX={cell[0]}\r\n                                    posY={cell[1]}\r\n                                    randColor={cell[2]}\r\n                                    onClickFn={\r\n                                        event => handleCellClick(event, cell[0], cell[1], cell[2], gameBoard, preventAnotherClick)\r\n                                    }\r\n                                />\r\n\r\n                            )\r\n                        )\r\n                    )\r\n                    }\r\n                </StyledBoard>\r\n            </BoardOverflowControler>\r\n            <ResignButton onClick={() => setAreAnyMovesLeft(false)}>Give up?</ResignButton>\r\n            {!areAnyMovesLeft ? (\r\n                <GameFinishModal score={score} switchScreen={switchScreen} />\r\n            )\r\n                : undefined\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GameBoard;","import React, { useState } from 'react';\r\nimport { AppWrapper, Header } from './App.styled';\r\nimport StartScreen from './components/start-screen/start-screen.component';\r\nimport GameBoard from './components/game-board/game-board.component';\r\n\r\nfunction App() {\r\n\r\n  const [gameProperties, setGameProperties] = useState({\r\n    rows: 3,\r\n    columns: 3,\r\n    difficulty: 3\r\n  });\r\n\r\n  const [screenToRender, setScreenToRender] = useState(0);\r\n\r\n  const changeBoardProperties = event => {\r\n    event.preventDefault();\r\n    const { name } = event.target;\r\n    const value = parseInt(event.target.value);\r\n\r\n    if (isNaN(value)) {\r\n      setGameProperties({\r\n        ...gameProperties,\r\n        [name]: ''\r\n      })\r\n    }\r\n    else {\r\n      setGameProperties({\r\n        ...gameProperties,\r\n        [name]: value\r\n      })\r\n    }\r\n  }\r\n\r\n  const changeGameDifficulty = event => {\r\n    const { value } = event.target;\r\n    const parsedVal = parseInt(value);\r\n    setGameProperties({\r\n      ...gameProperties,\r\n      difficulty: parsedVal\r\n    })\r\n  }\r\n\r\n  const changeGamePropertiesSimpleGame = (difficulty) => {\r\n    if(difficulty === 'easy') {setGameProperties({ rows: 4, columns: 4, difficulty: 3}); setScreenToRender(1)}\r\n    if(difficulty === 'medium') {setGameProperties({ rows: 6, columns: 6, difficulty: 5}); setScreenToRender(1)}\r\n    if(difficulty === 'hard') {setGameProperties({ rows: 8, columns: 8, difficulty: 8}); setScreenToRender(1)}\r\n  }\r\n\r\n  const checkValOnBlur = (event) => {\r\n    const { name, value } = event.target\r\n    if (value === '' || value < 3) {\r\n      setTimeout(() => setGameProperties({\r\n        ...gameProperties,\r\n        [name]: 3\r\n      }), 50)\r\n    }\r\n  }\r\n\r\n  const incrOrDecrInputVal = (event, incrOrDecr, name) => {\r\n    event.preventDefault();\r\n    const isNanTest = isNaN(parseInt(gameProperties[name]))\r\n    if (incrOrDecr === 'increment') {\r\n      if (isNanTest) setGameProperties({ ...gameProperties, [name]: 3 })\r\n      else\r\n        setGameProperties({\r\n          ...gameProperties,\r\n          [name]: gameProperties[name] + 1\r\n        })\r\n    }\r\n    else if (incrOrDecr === 'decrement') {\r\n      if (isNanTest) setGameProperties({ ...gameProperties, [name]: 3 })\r\n      else if (gameProperties[name] > 3)\r\n        setGameProperties({\r\n          ...gameProperties,\r\n          [name]: parseInt(gameProperties[name]) - 1\r\n        })\r\n    }\r\n  }\r\n\r\n  const switchScreen = (command) => {\r\n    if (command === 'restartGame') setScreenToRender(0);\r\n    else if (command === 'startGame') setScreenToRender(1);\r\n  }\r\n\r\n  const Screens = [\r\n    <StartScreen\r\n      changeBoardProperties={changeBoardProperties}\r\n      changeGameDifficulty={changeGameDifficulty}\r\n      changeGamePropertiesSimpleGame={changeGamePropertiesSimpleGame}\r\n      gameProperties={gameProperties}\r\n      switchScreen={switchScreen}\r\n      incrOrDecrInputVal={incrOrDecrInputVal}\r\n      checkValOnBlur={checkValOnBlur}\r\n    />,\r\n    <GameBoard gameProperties={gameProperties} switchScreen={switchScreen} />,\r\n  ];\r\n\r\n  return (\r\n    <AppWrapper>\r\n      <Header>Color game</Header>\r\n      {Screens[screenToRender]}\r\n    </AppWrapper>\r\n  );\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}